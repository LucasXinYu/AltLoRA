05/06/2025 06:23:36 - WARNING - __main__ - Process rank: 0, device: cuda:0, n_gpu: 1distributed training: True, 16-bits training: True
/root/miniconda3/lib/python3.10/site-packages/huggingface_hub/file_download.py:896: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
[WARNING|logging.py:314] 2025-05-06 06:23:47,058 >> Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
flash_attention_2
Loading checkpoint shards: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:01<00:00,  2.16it/s]
Model dtype: torch.bfloat16
Number of layers (parameter sets) in the model: 291
max_gate_samples is 50
trainable params: 29,360,128 || all params: 9,401,798,656 || trainable%: 0.3123
['query', 'response', 'type', 'original_question']
  0%|                                                                                                                                                                                                   | 0/1 [00:00<?, ?it/s][WARNING|logging.py:329] 2025-05-06 06:24:14,458 >> `use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...
==========================================
True
==========================================
=================================================================================
Adamw
8
False
=================================================================================
=================================================================================
SchedulerType.COSINE
=================================================================================
checkpoint
None
/root/miniconda3/lib/python3.10/site-packages/torch/utils/checkpoint.py:429: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 10/10 [01:15<00:00,  7.55s/it]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [01:19<00:00, 79.27s/it]
{'loss': 1.2721, 'learning_rate': 2.9341204441673266e-05, 'epoch': 0.0}
{'loss': 1.2627, 'learning_rate': 0.0, 'epoch': 0.01}
{'train_runtime': 75.5, 'train_samples_per_second': 4.238, 'train_steps_per_second': 0.132, 'train_loss': 1.267401885986328, 'epoch': 0.01}
***** train metrics *****
  epoch                    =       0.01
  train_loss               =     1.2674
  train_runtime            = 0:01:15.50
  train_samples            =      44056
  train_samples_per_second =      4.238
  train_steps_per_second   =      0.132

========== MODEL STRUCTURE ==========
PeftModelForCausalLM(
  (base_model): MoELoraModel(
    (model): LlamaForCausalLM(
      (model): LlamaModel(
        (embed_tokens): Embedding(128256, 4096)
        (layers): ModuleList(
          (0-31): 32 x LlamaDecoderLayer(
            (self_attn): LlamaSdpaAttention(
              (q_proj): MoELinear(
                in_features=4096, out_features=4096, bias=False
                (lora_dropout): Dropout(p=0.05, inplace=False)
                (lora_route): Linear(in_features=4096, out_features=4, bias=False)
                (lora_As): ModuleList(
                  (0-3): 4 x Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_Bs): ModuleList(
                  (0-3): 4 x Linear(in_features=8, out_features=4096, bias=False)
                )
                (base_layer): Linear(in_features=4096, out_features=4096, bias=False)
              )
              (k_proj): MoELinear(
                in_features=4096, out_features=1024, bias=False
                (lora_dropout): Dropout(p=0.05, inplace=False)
                (lora_route): Linear(in_features=4096, out_features=4, bias=False)
                (lora_As): ModuleList(
                  (0-3): 4 x Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_Bs): ModuleList(
                  (0-3): 4 x Linear(in_features=8, out_features=1024, bias=False)
                )
                (base_layer): Linear(in_features=4096, out_features=1024, bias=False)
              )
              (v_proj): MoELinear(
                in_features=4096, out_features=1024, bias=False
                (lora_dropout): Dropout(p=0.05, inplace=False)
                (lora_route): Linear(in_features=4096, out_features=4, bias=False)
                (lora_As): ModuleList(
                  (0-3): 4 x Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_Bs): ModuleList(
                  (0-3): 4 x Linear(in_features=8, out_features=1024, bias=False)
                )
                (base_layer): Linear(in_features=4096, out_features=1024, bias=False)
              )
              (o_proj): MoELinear(
                in_features=4096, out_features=4096, bias=False
                (lora_dropout): Dropout(p=0.05, inplace=False)
                (lora_route): Linear(in_features=4096, out_features=4, bias=False)
                (lora_As): ModuleList(
                  (0-3): 4 x Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_Bs): ModuleList(
                  (0-3): 4 x Linear(in_features=8, out_features=4096, bias=False)
                )
                (base_layer): Linear(in_features=4096, out_features=4096, bias=False)
              )
              (rotary_emb): LlamaRotaryEmbedding()
            )
            (mlp): LlamaMLP(
              (gate_proj): Linear(in_features=4096, out_features=14336, bias=False)
              (up_proj): Linear(in_features=4096, out_features=14336, bias=False)
              (down_proj): Linear(in_features=14336, out_features=4096, bias=False)
              (act_fn): SiLU()
            )
            (input_layernorm): LlamaRMSNorm()
            (post_attention_layernorm): LlamaRMSNorm()
          )
        )
        (norm): LlamaRMSNorm()
      )
      (lm_head): Linear(in_features=4096, out_features=128256, bias=False)
    )
  )
)

========== TRAINABLE PARAMETERS ==========
base_model.model.model.layers.0.self_attn.q_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.0.self_attn.q_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_Bs.0.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_Bs.1.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_Bs.2.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_Bs.3.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.0.self_attn.k_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_Bs.0.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.k_proj.lora_Bs.1.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.k_proj.lora_Bs.2.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.k_proj.lora_Bs.3.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.v_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.0.self_attn.v_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.v_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.v_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.v_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.v_proj.lora_Bs.0.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.v_proj.lora_Bs.1.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.v_proj.lora_Bs.2.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.v_proj.lora_Bs.3.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.o_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.0.self_attn.o_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_Bs.0.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_Bs.1.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_Bs.2.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_Bs.3.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.1.self_attn.q_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_Bs.0.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_Bs.1.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_Bs.2.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_Bs.3.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_route.weight: shape=torch.Size([4, 4096]), numel=16384
base_model.model.model.layers.1.self_attn.k_proj.lora_As.0.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_As.1.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_As.2.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_As.3.weight: shape=torch.Size([8, 4096]), numel=32768

Total trainable parameters: 29,360,128 / 9,401,798,656 (0.31%)

[MoELinear Layer] base_model.model.model.layers.0.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000099, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000184
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000058, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000187
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000062, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000184
  → Merged A: mean=0.000000, std=0.004517
  → Merged B: mean=-0.000001, std=0.000079

[MoELinear Layer] base_model.model.model.layers.0.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000188
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000066, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000180
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000077, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000190
  → Merged A: mean=-0.000041, std=0.004517
  → Merged B: mean=-0.000000, std=0.000094

[MoELinear Layer] base_model.model.model.layers.0.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000043, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000004, std=0.000193
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000194
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000005, std=0.000191
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000070, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000005, std=0.000190
  → Merged A: mean=0.000025, std=0.004517
  → Merged B: mean=0.000001, std=0.000092

[MoELinear Layer] base_model.model.model.layers.0.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000014, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000180
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000024, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000184
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000047, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000190
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000015, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000184
  → Merged A: mean=0.000025, std=0.004517
  → Merged B: mean=-0.000001, std=0.000085

[MoELinear Layer] base_model.model.model.layers.1.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000038, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000165
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000016, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000175
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000173
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000175
  → Merged A: mean=-0.000034, std=0.004486
  → Merged B: mean=0.000000, std=0.000089

[MoELinear Layer] base_model.model.model.layers.1.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000037, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000183
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000011, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000179
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000055, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000175
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000000, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000183
  → Merged A: mean=-0.000007, std=0.004517
  → Merged B: mean=0.000000, std=0.000092

[MoELinear Layer] base_model.model.model.layers.1.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000075, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000197
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000198
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000078, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000027, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000199
  → Merged A: mean=0.000002, std=0.004486
  → Merged B: mean=0.000000, std=0.000100

[MoELinear Layer] base_model.model.model.layers.1.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000025, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000183
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000015, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000179
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000070, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000183
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000176
  → Merged A: mean=-0.000003, std=0.004517
  → Merged B: mean=-0.000001, std=0.000079

[MoELinear Layer] base_model.model.model.layers.2.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000036, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000155
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000154
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000050, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000154
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000156
  → Merged A: mean=-0.000012, std=0.004547
  → Merged B: mean=0.000000, std=0.000088

[MoELinear Layer] base_model.model.model.layers.2.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000066, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000158
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000050, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000167
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000163
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000040, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000158
  → Merged A: mean=0.000010, std=0.004486
  → Merged B: mean=0.000000, std=0.000077

[MoELinear Layer] base_model.model.model.layers.2.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000051, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000006, std=0.000204
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000198
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000004, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000201
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000074, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000200
  → Merged A: mean=0.000032, std=0.004486
  → Merged B: mean=-0.000002, std=0.000118

[MoELinear Layer] base_model.model.model.layers.2.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000003, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000193
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000079, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000194
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000015, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000186
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000195
  → Merged A: mean=0.000018, std=0.004517
  → Merged B: mean=0.000000, std=0.000085

[MoELinear Layer] base_model.model.model.layers.3.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000162
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000171
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000032, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000162
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000011, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000165
  → Merged A: mean=-0.000017, std=0.004517
  → Merged B: mean=0.000000, std=0.000076

[MoELinear Layer] base_model.model.model.layers.3.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000042, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000004, std=0.000173
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000089, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000171
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000169
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000043, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000176
  → Merged A: mean=-0.000046, std=0.004517
  → Merged B: mean=-0.000001, std=0.000089

[MoELinear Layer] base_model.model.model.layers.3.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000200
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000025, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000199
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000206
  → Merged A: mean=0.000007, std=0.004517
  → Merged B: mean=-0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.3.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000001, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000195
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000017, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000194
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000067, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000193
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000196
  → Merged A: mean=0.000018, std=0.004486
  → Merged B: mean=0.000001, std=0.000099

[MoELinear Layer] base_model.model.model.layers.4.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000119, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000163
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000167
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000069, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000175
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000041, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000172
  → Merged A: mean=0.000063, std=0.004517
  → Merged B: mean=0.000000, std=0.000090

[MoELinear Layer] base_model.model.model.layers.4.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000173
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000040, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000175
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000182
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000032, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000174
  → Merged A: mean=0.000014, std=0.004517
  → Merged B: mean=-0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.4.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000103, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000196
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000002, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000073, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000050, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000195
  → Merged A: mean=0.000031, std=0.004547
  → Merged B: mean=0.000000, std=0.000111

[MoELinear Layer] base_model.model.model.layers.4.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000041, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000181
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000006, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000195
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000007, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000194
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000033, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000187
  → Merged A: mean=-0.000019, std=0.004486
  → Merged B: mean=-0.000001, std=0.000105

[MoELinear Layer] base_model.model.model.layers.5.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000017, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000164
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000122, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000168
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000056, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000167
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000030, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000166
  → Merged A: mean=0.000056, std=0.004486
  → Merged B: mean=0.000000, std=0.000080

[MoELinear Layer] base_model.model.model.layers.5.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000082, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000170
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000085, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000173
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000175
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000048, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000175
  → Merged A: mean=-0.000020, std=0.004517
  → Merged B: mean=0.000000, std=0.000083

[MoELinear Layer] base_model.model.model.layers.5.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000024, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000197
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=-0.000004, std=0.000199
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000030, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000201
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000072, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000196
  → Merged A: mean=-0.000001, std=0.004547
  → Merged B: mean=-0.000001, std=0.000095

[MoELinear Layer] base_model.model.model.layers.5.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000002, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000195
  → Merged A: mean=-0.000007, std=0.004517
  → Merged B: mean=-0.000000, std=0.000113

[MoELinear Layer] base_model.model.model.layers.6.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000162
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000025, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000166
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000004, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000175
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000045, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000163
  → Merged A: mean=-0.000024, std=0.004517
  → Merged B: mean=0.000000, std=0.000085

[MoELinear Layer] base_model.model.model.layers.6.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000178
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000076, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000175
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000028, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000176
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000042, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000005, std=0.000177
  → Merged A: mean=0.000031, std=0.004486
  → Merged B: mean=-0.000000, std=0.000087

[MoELinear Layer] base_model.model.model.layers.6.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000004, std=0.000201
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000197
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000025, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000189
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000196
  → Merged A: mean=0.000020, std=0.004547
  → Merged B: mean=0.000000, std=0.000092

[MoELinear Layer] base_model.model.model.layers.6.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000194
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000057, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000196
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000190
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000044, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000191
  → Merged A: mean=0.000023, std=0.004517
  → Merged B: mean=0.000000, std=0.000095

[MoELinear Layer] base_model.model.model.layers.7.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000041, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000171
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000033, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000167
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000016, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000168
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000033, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000170
  → Merged A: mean=-0.000006, std=0.004486
  → Merged B: mean=0.000000, std=0.000082

[MoELinear Layer] base_model.model.model.layers.7.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000171
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000057, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000178
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000176
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000000, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000175
  → Merged A: mean=0.000002, std=0.004547
  → Merged B: mean=0.000000, std=0.000076

[MoELinear Layer] base_model.model.model.layers.7.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000002, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000202
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000192
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000062, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000010, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000201
  → Merged A: mean=0.000025, std=0.004517
  → Merged B: mean=0.000001, std=0.000085

[MoELinear Layer] base_model.model.model.layers.7.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000020, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000203
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000202
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000098, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000201
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000038, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000195
  → Merged A: mean=-0.000017, std=0.004517
  → Merged B: mean=0.000000, std=0.000088

[MoELinear Layer] base_model.model.model.layers.8.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000045, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000180
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000175
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000165
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000019, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000174
  → Merged A: mean=0.000018, std=0.004517
  → Merged B: mean=-0.000001, std=0.000091

[MoELinear Layer] base_model.model.model.layers.8.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000166
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000071, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000172
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000030, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000177
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000083, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000177
  → Merged A: mean=-0.000042, std=0.004517
  → Merged B: mean=0.000001, std=0.000087

[MoELinear Layer] base_model.model.model.layers.8.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000020, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000197
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000088, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000191
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000007, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000195
  → Merged A: mean=-0.000023, std=0.004547
  → Merged B: mean=-0.000001, std=0.000096

[MoELinear Layer] base_model.model.model.layers.8.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000002, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000196
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000071, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000188
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000191
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000073, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000206
  → Merged A: mean=0.000012, std=0.004517
  → Merged B: mean=0.000000, std=0.000093

[MoELinear Layer] base_model.model.model.layers.9.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000167
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000076, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000158
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000159
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000064, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000160
  → Merged A: mean=-0.000035, std=0.004517
  → Merged B: mean=0.000000, std=0.000069

[MoELinear Layer] base_model.model.model.layers.9.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000167
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000161
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000100, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000161
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000065, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000166
  → Merged A: mean=-0.000033, std=0.004517
  → Merged B: mean=-0.000000, std=0.000078

[MoELinear Layer] base_model.model.model.layers.9.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000103, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000196
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000201
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000016, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000004, std=0.000199
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000043, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000005, std=0.000190
  → Merged A: mean=0.000002, std=0.004517
  → Merged B: mean=0.000001, std=0.000085

[MoELinear Layer] base_model.model.model.layers.9.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000190
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000011, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000190
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  → Merged A: mean=-0.000001, std=0.004517
  → Merged B: mean=0.000001, std=0.000100

[MoELinear Layer] base_model.model.model.layers.10.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000158
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000060, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000167
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000131, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000165
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000160
  → Merged A: mean=-0.000019, std=0.004517
  → Merged B: mean=-0.000000, std=0.000085

[MoELinear Layer] base_model.model.model.layers.10.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000070, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000158
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000039, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000169
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000015, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000165
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000053, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000165
  → Merged A: mean=-0.000025, std=0.004486
  → Merged B: mean=-0.000000, std=0.000072

[MoELinear Layer] base_model.model.model.layers.10.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000198
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000099, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000190
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000052, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000196
  → Merged A: mean=-0.000007, std=0.004486
  → Merged B: mean=-0.000001, std=0.000097

[MoELinear Layer] base_model.model.model.layers.10.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000179
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000190
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000022, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000190
  → Merged A: mean=-0.000006, std=0.004517
  → Merged B: mean=-0.000000, std=0.000094

[MoELinear Layer] base_model.model.model.layers.11.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000011, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000170
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000058, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000164
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000019, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000164
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000000, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000169
  → Merged A: mean=-0.000007, std=0.004547
  → Merged B: mean=0.000000, std=0.000082

[MoELinear Layer] base_model.model.model.layers.11.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000156
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000163
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000005, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000165
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000004, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000166
  → Merged A: mean=0.000002, std=0.004486
  → Merged B: mean=-0.000000, std=0.000087

[MoELinear Layer] base_model.model.model.layers.11.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000032, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000198
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000190
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000056, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000187
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000075, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000197
  → Merged A: mean=-0.000025, std=0.004517
  → Merged B: mean=0.000001, std=0.000095

[MoELinear Layer] base_model.model.model.layers.11.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000117, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000191
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000121, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000187
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000103, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000194
  → Merged A: mean=0.000025, std=0.004517
  → Merged B: mean=0.000000, std=0.000091

[MoELinear Layer] base_model.model.model.layers.12.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000005, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000159
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000097, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000155
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000075, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000154
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000044, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000154
  → Merged A: mean=0.000004, std=0.004517
  → Merged B: mean=0.000001, std=0.000086

[MoELinear Layer] base_model.model.model.layers.12.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000160
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000160
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000102, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000164
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000041, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000156
  → Merged A: mean=0.000014, std=0.004486
  → Merged B: mean=0.000001, std=0.000070

[MoELinear Layer] base_model.model.model.layers.12.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000020, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000191
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000106, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000194
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000052, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000197
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000106, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000190
  → Merged A: mean=0.000045, std=0.004517
  → Merged B: mean=-0.000000, std=0.000111

[MoELinear Layer] base_model.model.model.layers.12.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000108, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000191
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000188
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000032, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000191
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000038, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000191
  → Merged A: mean=-0.000028, std=0.004517
  → Merged B: mean=0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.13.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000148
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000000, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000152
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000041, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000152
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000056, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000151
  → Merged A: mean=0.000004, std=0.004486
  → Merged B: mean=-0.000000, std=0.000069

[MoELinear Layer] base_model.model.model.layers.13.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000103, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000006, std=0.000157
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000042, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000146
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000002, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000158
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000023, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000154
  → Merged A: mean=0.000020, std=0.004517
  → Merged B: mean=0.000002, std=0.000082

[MoELinear Layer] base_model.model.model.layers.13.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000182
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000198
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000104, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000186
  → Merged A: mean=-0.000032, std=0.004517
  → Merged B: mean=-0.000001, std=0.000104

[MoELinear Layer] base_model.model.model.layers.13.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000064, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000192
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000094, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000188
  → Merged A: mean=0.000011, std=0.004517
  → Merged B: mean=0.000001, std=0.000095

[MoELinear Layer] base_model.model.model.layers.14.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000070, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000157
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000048, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000157
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000161
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000157
  → Merged A: mean=-0.000039, std=0.004517
  → Merged B: mean=0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.14.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000091, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000163
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000023, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000164
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000048, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000162
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000167
  → Merged A: mean=0.000028, std=0.004547
  → Merged B: mean=0.000001, std=0.000084

[MoELinear Layer] base_model.model.model.layers.14.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000053, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000181
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000068, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000190
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000032, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000191
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000180
  → Merged A: mean=0.000021, std=0.004486
  → Merged B: mean=0.000000, std=0.000082

[MoELinear Layer] base_model.model.model.layers.14.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000066, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000186
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000059, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000062, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000187
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000071, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000183
  → Merged A: mean=0.000029, std=0.004517
  → Merged B: mean=0.000000, std=0.000073

[MoELinear Layer] base_model.model.model.layers.15.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000167
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000064, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000154
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000019, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000161
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000040, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000165
  → Merged A: mean=0.000013, std=0.004517
  → Merged B: mean=-0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.15.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000023, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000163
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000082, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000163
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000157, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000164
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000160
  → Merged A: mean=-0.000070, std=0.004547
  → Merged B: mean=-0.000000, std=0.000078

[MoELinear Layer] base_model.model.model.layers.15.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000009, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000182
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000049, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000185
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000025, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000191
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000188
  → Merged A: mean=-0.000003, std=0.004517
  → Merged B: mean=0.000002, std=0.000103

[MoELinear Layer] base_model.model.model.layers.15.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000195
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000183
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000037, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000195
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000064, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000194
  → Merged A: mean=-0.000018, std=0.004517
  → Merged B: mean=-0.000000, std=0.000092

[MoELinear Layer] base_model.model.model.layers.16.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000172
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000090, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000171
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000167
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000067, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000169
  → Merged A: mean=0.000036, std=0.004486
  → Merged B: mean=-0.000000, std=0.000081

[MoELinear Layer] base_model.model.model.layers.16.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000018, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000179
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000066, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000176
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000035, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000168
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000059, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000004, std=0.000166
  → Merged A: mean=0.000036, std=0.004517
  → Merged B: mean=-0.000001, std=0.000072

[MoELinear Layer] base_model.model.model.layers.16.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000004, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000004, std=0.000196
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000019, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000186
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000186
  → Merged A: mean=-0.000004, std=0.004517
  → Merged B: mean=0.000000, std=0.000091

[MoELinear Layer] base_model.model.model.layers.16.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000189
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000037, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000195
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000005, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000187
  → Merged A: mean=-0.000004, std=0.004517
  → Merged B: mean=-0.000001, std=0.000092

[MoELinear Layer] base_model.model.model.layers.17.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000165
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000045, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000172
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000164
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000060, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000172
  → Merged A: mean=0.000029, std=0.004547
  → Merged B: mean=0.000001, std=0.000080

[MoELinear Layer] base_model.model.model.layers.17.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000112, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000174
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000177
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000053, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000179
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000182
  → Merged A: mean=-0.000026, std=0.004517
  → Merged B: mean=0.000000, std=0.000091

[MoELinear Layer] base_model.model.model.layers.17.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000082, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000198
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000082, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000196
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000103, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000194
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000005, std=0.000193
  → Merged A: mean=0.000017, std=0.004547
  → Merged B: mean=0.000000, std=0.000097

[MoELinear Layer] base_model.model.model.layers.17.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000018, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000190
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000067, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000192
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000172
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000192
  → Merged A: mean=-0.000035, std=0.004486
  → Merged B: mean=0.000000, std=0.000093

[MoELinear Layer] base_model.model.model.layers.18.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000165
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000010, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000159
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000166
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000024, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000160
  → Merged A: mean=-0.000003, std=0.004517
  → Merged B: mean=0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.18.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000005, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000168
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000041, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000160
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000167
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000053, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000165
  → Merged A: mean=0.000012, std=0.004517
  → Merged B: mean=-0.000001, std=0.000078

[MoELinear Layer] base_model.model.model.layers.18.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000197
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000069, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000187
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000188
  → Merged A: mean=0.000002, std=0.004547
  → Merged B: mean=0.000000, std=0.000103

[MoELinear Layer] base_model.model.model.layers.18.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000050, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000083, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000191
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000024, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000184
  → Merged A: mean=0.000021, std=0.004517
  → Merged B: mean=-0.000001, std=0.000078

[MoELinear Layer] base_model.model.model.layers.19.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000037, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000177
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000173
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000092, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000173
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000011, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000174
  → Merged A: mean=0.000038, std=0.004517
  → Merged B: mean=-0.000000, std=0.000077

[MoELinear Layer] base_model.model.model.layers.19.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000057, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000174
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000063, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000178
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000173
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000095, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000181
  → Merged A: mean=-0.000013, std=0.004517
  → Merged B: mean=-0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.19.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000111, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000195
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000025, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000196
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000004, std=0.000197
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000198
  → Merged A: mean=0.000022, std=0.004517
  → Merged B: mean=0.000001, std=0.000106

[MoELinear Layer] base_model.model.model.layers.19.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000037, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000182
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000079, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000187
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000028, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000188
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000020, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000189
  → Merged A: mean=0.000022, std=0.004547
  → Merged B: mean=0.000001, std=0.000091

[MoELinear Layer] base_model.model.model.layers.20.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000165
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000075, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000170
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000033, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000167
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000167
  → Merged A: mean=0.000031, std=0.004517
  → Merged B: mean=-0.000000, std=0.000085

[MoELinear Layer] base_model.model.model.layers.20.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000013, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000173
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000173
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000053, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000172
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000059, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000170
  → Merged A: mean=-0.000002, std=0.004517
  → Merged B: mean=0.000000, std=0.000085

[MoELinear Layer] base_model.model.model.layers.20.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000034, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000196
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000066, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000204
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000056, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000203
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000068, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000199
  → Merged A: mean=0.000023, std=0.004517
  → Merged B: mean=0.000000, std=0.000081

[MoELinear Layer] base_model.model.model.layers.20.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000193
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000096, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000188
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000061, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000034, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000186
  → Merged A: mean=-0.000053, std=0.004517
  → Merged B: mean=0.000000, std=0.000087

[MoELinear Layer] base_model.model.model.layers.21.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000001, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000174
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000051, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000180
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000036, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000166
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000177
  → Merged A: mean=0.000015, std=0.004517
  → Merged B: mean=0.000000, std=0.000086

[MoELinear Layer] base_model.model.model.layers.21.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000084, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000177
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000024, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000174
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000179
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000174
  → Merged A: mean=-0.000031, std=0.004486
  → Merged B: mean=0.000000, std=0.000088

[MoELinear Layer] base_model.model.model.layers.21.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000024, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000005, std=0.000201
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000191
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000017, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=-0.000006, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000008, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000193
  → Merged A: mean=-0.000003, std=0.004517
  → Merged B: mean=-0.000002, std=0.000099

[MoELinear Layer] base_model.model.model.layers.21.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000195
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000086, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000193
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000195
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000193
  → Merged A: mean=-0.000011, std=0.004517
  → Merged B: mean=-0.000000, std=0.000106

[MoELinear Layer] base_model.model.model.layers.22.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000074, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000178
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000007, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000172
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000015, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000168
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000056, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000167
  → Merged A: mean=-0.000034, std=0.004517
  → Merged B: mean=0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.22.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000015, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000172
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000047, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000169
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000038, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000171
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000097, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000174
  → Merged A: mean=0.000030, std=0.004486
  → Merged B: mean=-0.000001, std=0.000086

[MoELinear Layer] base_model.model.model.layers.22.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000006, std=0.000200
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000007, std=0.000199
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000200
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000107, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000201
  → Merged A: mean=-0.000043, std=0.004517
  → Merged B: mean=-0.000001, std=0.000086

[MoELinear Layer] base_model.model.model.layers.22.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000198
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000004, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000203
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000002, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000196
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000199
  → Merged A: mean=-0.000021, std=0.004517
  → Merged B: mean=-0.000000, std=0.000084

[MoELinear Layer] base_model.model.model.layers.23.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000072, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000167
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000034, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000173
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000063, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000171
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000159
  → Merged A: mean=0.000037, std=0.004517
  → Merged B: mean=0.000000, std=0.000086

[MoELinear Layer] base_model.model.model.layers.23.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000007, std=0.000177
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000075, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000184
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000078, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000175
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000016, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000175
  → Merged A: mean=0.000009, std=0.004517
  → Merged B: mean=-0.000002, std=0.000083

[MoELinear Layer] base_model.model.model.layers.23.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000200
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000201
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000011, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000006, std=0.000199
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000046, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000201
  → Merged A: mean=-0.000022, std=0.004517
  → Merged B: mean=0.000001, std=0.000080

[MoELinear Layer] base_model.model.model.layers.23.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000076, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000199
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000192
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000199
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000038, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000198
  → Merged A: mean=-0.000002, std=0.004517
  → Merged B: mean=0.000000, std=0.000109

[MoELinear Layer] base_model.model.model.layers.24.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000168
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000207, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000175
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000174
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000098, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000176
  → Merged A: mean=-0.000082, std=0.004486
  → Merged B: mean=-0.000001, std=0.000090

[MoELinear Layer] base_model.model.model.layers.24.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000056, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000183
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000077, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000176
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000051, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000176
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000178
  → Merged A: mean=0.000025, std=0.004517
  → Merged B: mean=0.000001, std=0.000091

[MoELinear Layer] base_model.model.model.layers.24.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000060, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000008, std=0.000205
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000005, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000204
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000005, std=0.000210
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000074, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000212
  → Merged A: mean=0.000022, std=0.004517
  → Merged B: mean=0.000000, std=0.000110

[MoELinear Layer] base_model.model.model.layers.24.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000042, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000202
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000197
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000115, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000207
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000017, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000203
  → Merged A: mean=-0.000040, std=0.004517
  → Merged B: mean=0.000000, std=0.000106

[MoELinear Layer] base_model.model.model.layers.25.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000053, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000174
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000180
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000056, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000174
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000088, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000176
  → Merged A: mean=0.000044, std=0.004486
  → Merged B: mean=-0.000001, std=0.000083

[MoELinear Layer] base_model.model.model.layers.25.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000080, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000184
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000007, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000188
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000059, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000185
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000079, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000181
  → Merged A: mean=-0.000013, std=0.004547
  → Merged B: mean=-0.000000, std=0.000088

[MoELinear Layer] base_model.model.model.layers.25.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000207
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000004, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000215
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000071, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000208
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000037, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000214
  → Merged A: mean=0.000038, std=0.004547
  → Merged B: mean=-0.000001, std=0.000122

[MoELinear Layer] base_model.model.model.layers.25.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000198
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000013, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000205
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000200
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000010, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000206
  → Merged A: mean=0.000012, std=0.004517
  → Merged B: mean=0.000000, std=0.000106

[MoELinear Layer] base_model.model.model.layers.26.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000175
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000062, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000178
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000144, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000172
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000069, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000174
  → Merged A: mean=-0.000019, std=0.004517
  → Merged B: mean=-0.000000, std=0.000082

[MoELinear Layer] base_model.model.model.layers.26.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000020, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000178
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000111, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000176
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000189
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000011, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000004, std=0.000183
  → Merged A: mean=0.000023, std=0.004486
  → Merged B: mean=0.000000, std=0.000086

[MoELinear Layer] base_model.model.model.layers.26.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000015, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000201
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000210
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000015, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000208
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000204
  → Merged A: mean=0.000017, std=0.004547
  → Merged B: mean=-0.000001, std=0.000113

[MoELinear Layer] base_model.model.model.layers.26.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000082, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000208
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000071, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000201
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000033, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000203
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000018, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000198
  → Merged A: mean=-0.000051, std=0.004547
  → Merged B: mean=0.000000, std=0.000073

[MoELinear Layer] base_model.model.model.layers.27.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000076, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000171
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000045, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000184
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000043, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000169
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000018, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000182
  → Merged A: mean=-0.000014, std=0.004547
  → Merged B: mean=-0.000001, std=0.000076

[MoELinear Layer] base_model.model.model.layers.27.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000011, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000186
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000196
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000042, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000004, std=0.000186
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000024, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000191
  → Merged A: mean=-0.000010, std=0.004547
  → Merged B: mean=0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.27.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000065, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000207
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000093, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000210
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000206
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000211
  → Merged A: mean=0.000002, std=0.004517
  → Merged B: mean=0.000001, std=0.000098

[MoELinear Layer] base_model.model.model.layers.27.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000039, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000203
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000205
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000019, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000204
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000071, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000205
  → Merged A: mean=0.000007, std=0.004486
  → Merged B: mean=0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.28.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000052, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000180
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000004, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000179
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000160, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000179
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000039, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000176
  → Merged A: mean=-0.000064, std=0.004486
  → Merged B: mean=0.000000, std=0.000092

[MoELinear Layer] base_model.model.model.layers.28.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000014, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000183
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000035, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000185
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000189
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000185
  → Merged A: mean=0.000006, std=0.004547
  → Merged B: mean=0.000002, std=0.000099

[MoELinear Layer] base_model.model.model.layers.28.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000214
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000055, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000213
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000206
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000007, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000205
  → Merged A: mean=-0.000018, std=0.004517
  → Merged B: mean=0.000001, std=0.000088

[MoELinear Layer] base_model.model.model.layers.28.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000118, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000203
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000022, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000212
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000033, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000208
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000198
  → Merged A: mean=-0.000038, std=0.004517
  → Merged B: mean=-0.000000, std=0.000125

[MoELinear Layer] base_model.model.model.layers.29.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000171
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000183
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000009, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000178
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000185
  → Merged A: mean=-0.000015, std=0.004517
  → Merged B: mean=0.000000, std=0.000090

[MoELinear Layer] base_model.model.model.layers.29.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000041, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000187
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000181
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000177
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000071, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000182
  → Merged A: mean=-0.000022, std=0.004517
  → Merged B: mean=-0.000001, std=0.000088

[MoELinear Layer] base_model.model.model.layers.29.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000002, std=0.000216
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000072, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000210
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000212
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000068, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000206
  → Merged A: mean=-0.000003, std=0.004486
  → Merged B: mean=0.000000, std=0.000101

[MoELinear Layer] base_model.model.model.layers.29.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000003, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000208
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000016, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000212
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000039, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000207
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000047, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000208
  → Merged A: mean=-0.000018, std=0.004517
  → Merged B: mean=-0.000001, std=0.000115

[MoELinear Layer] base_model.model.model.layers.30.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000191
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000185
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000057, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000002, std=0.000193
  → Merged A: mean=0.000010, std=0.004517
  → Merged B: mean=-0.000000, std=0.000091

[MoELinear Layer] base_model.model.model.layers.30.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000056, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000199
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000200
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000074, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000197
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000044, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000195
  → Merged A: mean=-0.000032, std=0.004486
  → Merged B: mean=-0.000000, std=0.000106

[MoELinear Layer] base_model.model.model.layers.30.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000018, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000006, std=0.000211
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000065, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000001, std=0.000212
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000007, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000003, std=0.000209
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000211
  → Merged A: mean=-0.000005, std=0.004517
  → Merged B: mean=-0.000001, std=0.000095

[MoELinear Layer] base_model.model.model.layers.30.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000212
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000198
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000032, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000209
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000050, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000198
  → Merged A: mean=0.000030, std=0.004547
  → Merged B: mean=0.000000, std=0.000098

[MoELinear Layer] base_model.model.model.layers.31.self_attn.q_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000050, std=0.009094
    B: shape=torch.Size([4096, 8]), mean=0.000002, std=0.000188
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000033, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000188
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000093, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000192
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000196
  → Merged A: mean=-0.000015, std=0.004517
  → Merged B: mean=0.000001, std=0.000090

[MoELinear Layer] base_model.model.model.layers.31.self_attn.k_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000071, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000200
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000197
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000065, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000207
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000059, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000201
  → Merged A: mean=0.000016, std=0.004486
  → Merged B: mean=0.000001, std=0.000093

[MoELinear Layer] base_model.model.model.layers.31.self_attn.v_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000006, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000003, std=0.000208
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000001, std=0.000206
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000045, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000002, std=0.000210
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000051, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=-0.000000, std=0.000202
  → Merged A: mean=-0.000002, std=0.004547
  → Merged B: mean=0.000001, std=0.000122

[MoELinear Layer] base_model.model.model.layers.31.self_attn.o_proj
  Expert 0 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000014, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000207
  Expert 1 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000001, std=0.000211
  Expert 2 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000008, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000001, std=0.000207
  Expert 3 (w=0.2500):
    A: shape=torch.Size([8, 4096]), mean=-0.000106, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=-0.000000, std=0.000208
  → Merged A: mean=-0.000031, std=0.004517
  → Merged B: mean=-0.000000, std=0.000119
<class 'peft.tuners.lora.model.LoraModel'>
lora.Linear(
  (base_layer): Linear(in_features=4096, out_features=4096, bias=False)
  (lora_dropout): ModuleDict(
    (default): Dropout(p=0.05, inplace=False)
  )
  (lora_A): ModuleDict(
    (default): Linear(in_features=4096, out_features=8, bias=False)
  )
  (lora_B): ModuleDict(
    (default): Linear(in_features=8, out_features=4096, bias=False)
  )
  (lora_embedding_A): ParameterDict()
  (lora_embedding_B): ParameterDict()
  (lora_magnitude_vector): ModuleDict()
)

========== MODEL STRUCTURE ==========
PeftModelForCausalLM(
  (base_model): LoraModel(
    (model): LlamaForCausalLM(
      (model): LlamaModel(
        (embed_tokens): Embedding(128256, 4096)
        (layers): ModuleList(
          (0-31): 32 x LlamaDecoderLayer(
            (self_attn): LlamaSdpaAttention(
              (q_proj): lora.Linear(
                (base_layer): Linear(in_features=4096, out_features=4096, bias=False)
                (lora_dropout): ModuleDict(
                  (default): Dropout(p=0.05, inplace=False)
                )
                (lora_A): ModuleDict(
                  (default): Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_B): ModuleDict(
                  (default): Linear(in_features=8, out_features=4096, bias=False)
                )
                (lora_embedding_A): ParameterDict()
                (lora_embedding_B): ParameterDict()
                (lora_magnitude_vector): ModuleDict()
              )
              (k_proj): lora.Linear(
                (base_layer): Linear(in_features=4096, out_features=1024, bias=False)
                (lora_dropout): ModuleDict(
                  (default): Dropout(p=0.05, inplace=False)
                )
                (lora_A): ModuleDict(
                  (default): Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_B): ModuleDict(
                  (default): Linear(in_features=8, out_features=1024, bias=False)
                )
                (lora_embedding_A): ParameterDict()
                (lora_embedding_B): ParameterDict()
                (lora_magnitude_vector): ModuleDict()
              )
              (v_proj): lora.Linear(
                (base_layer): Linear(in_features=4096, out_features=1024, bias=False)
                (lora_dropout): ModuleDict(
                  (default): Dropout(p=0.05, inplace=False)
                )
                (lora_A): ModuleDict(
                  (default): Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_B): ModuleDict(
                  (default): Linear(in_features=8, out_features=1024, bias=False)
                )
                (lora_embedding_A): ParameterDict()
                (lora_embedding_B): ParameterDict()
                (lora_magnitude_vector): ModuleDict()
              )
              (o_proj): lora.Linear(
                (base_layer): Linear(in_features=4096, out_features=4096, bias=False)
                (lora_dropout): ModuleDict(
                  (default): Dropout(p=0.05, inplace=False)
                )
                (lora_A): ModuleDict(
                  (default): Linear(in_features=4096, out_features=8, bias=False)
                )
                (lora_B): ModuleDict(
                  (default): Linear(in_features=8, out_features=4096, bias=False)
                )
                (lora_embedding_A): ParameterDict()
                (lora_embedding_B): ParameterDict()
                (lora_magnitude_vector): ModuleDict()
              )
              (rotary_emb): LlamaRotaryEmbedding()
            )
            (mlp): LlamaMLP(
              (gate_proj): Linear(in_features=4096, out_features=14336, bias=False)
              (up_proj): Linear(in_features=4096, out_features=14336, bias=False)
              (down_proj): Linear(in_features=14336, out_features=4096, bias=False)
              (act_fn): SiLU()
            )
            (input_layernorm): LlamaRMSNorm()
            (post_attention_layernorm): LlamaRMSNorm()
          )
        )
        (norm): LlamaRMSNorm()
      )
      (lm_head): Linear(in_features=4096, out_features=128256, bias=False)
    )
  )
)

========== TRAINABLE PARAMETERS ==========
base_model.model.model.layers.0.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.0.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.0.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.1.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.1.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.1.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.2.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.2.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.2.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.2.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.2.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.2.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.2.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.2.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.3.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.3.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.3.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.3.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.3.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.3.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.3.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.3.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.4.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.4.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.4.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.4.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.4.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.4.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.4.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.4.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.5.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.5.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.5.self_attn.k_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.5.self_attn.k_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.5.self_attn.v_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.5.self_attn.v_proj.lora_B.default.weight: shape=torch.Size([1024, 8]), numel=8192
base_model.model.model.layers.5.self_attn.o_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.5.self_attn.o_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768
base_model.model.model.layers.6.self_attn.q_proj.lora_A.default.weight: shape=torch.Size([8, 4096]), numel=32768
base_model.model.model.layers.6.self_attn.q_proj.lora_B.default.weight: shape=torch.Size([4096, 8]), numel=32768

Total trainable parameters: 6,815,744 / 8,037,076,992 (0.08%)

[LoraLinear Layer] base_model.model.model.layers.0.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000017, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.0.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000002, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.0.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000025, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.0.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.1.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000088, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.1.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000052, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.1.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000039, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.1.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.2.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.2.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000045, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.2.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000013, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.2.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000071, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.3.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000116, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.3.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000067, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.3.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000005, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.3.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.4.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000050, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.4.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000050, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.4.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000074, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.4.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.5.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000019, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.5.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000008, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.5.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.009094
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.5.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000031, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.6.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000052, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.6.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.6.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000056, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.6.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000011, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.7.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.7.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.7.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000022, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.7.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.8.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000046, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.8.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000043, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.8.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.8.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000028, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.9.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000082, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.9.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000082, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.9.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000029, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.9.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000034, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.10.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.10.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000002, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.10.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.10.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000038, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.11.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000104, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.11.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000036, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.11.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000027, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.11.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000081, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.12.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000048, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.12.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000091, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.12.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000020, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.12.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000007, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.13.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000023, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.13.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000045, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.13.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.13.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000106, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.14.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000049, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.14.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000061, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.14.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000065, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.14.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000030, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.15.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000099, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.15.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000052, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.15.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000083, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.15.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000122, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.16.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000072, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.16.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.16.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000025, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.16.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000009, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.17.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000017, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.17.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.17.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000032, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.17.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000058, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.18.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000047, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.18.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000016, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.18.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000007, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.18.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000059, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.19.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000051, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.19.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000075, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.19.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000026, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.19.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000090, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.20.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000067, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.20.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000084, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.20.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000146, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.20.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000118, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.21.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000000, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.21.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000000, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.21.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000029, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.21.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.22.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000059, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.22.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000104, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.22.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000000, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.22.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000008, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.23.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000064, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.23.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000027, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.23.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000012, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.23.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000028, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.24.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000055, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.24.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000038, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.24.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000009, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.24.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000014, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.25.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000061, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.25.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000062, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.25.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.25.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.26.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000026, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.26.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000040, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.26.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000013, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.26.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000037, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.27.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000061, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.27.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000019, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.27.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000035, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.27.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000013, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.28.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000003, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.28.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000081, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.28.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000001, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.28.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000018, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.29.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000067, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.29.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000010, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.29.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000117, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.29.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000053, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.30.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000002, std=0.008972
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.30.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000085, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.30.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000065, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.30.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000022, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.31.self_attn.q_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000006, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.31.self_attn.k_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000093, std=0.009033
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.31.self_attn.v_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=-0.000021, std=0.008972
    B: shape=torch.Size([1024, 8]), mean=0.000000, std=0.000000

[LoraLinear Layer] base_model.model.model.layers.31.self_attn.o_proj
  Adapter: default
    A: shape=torch.Size([8, 4096]), mean=0.000015, std=0.009033
    B: shape=torch.Size([4096, 8]), mean=0.000000, std=0.000000
/root/miniconda3/lib/python3.10/site-packages/transformers/utils/hub.py:821: FutureWarning: The `use_auth_token` argument is deprecated and will be removed in v5 of Transformers. Please use `token` instead.
  warnings.warn(
No files have been modified since last commit. Skipping to prevent empty commit.
05/06/2025 06:25:47 - WARNING - huggingface_hub.hf_api - No files have been modified since last commit. Skipping to prevent empty commit.
